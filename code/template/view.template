// Create by code generator  {{.CreateTime}}
package view

import (
	"{{.ModelPackagePath}}"
	"time"
)
type {{.TableNameUpperCamel}}View struct {
	{{range $field := .Fields}}{{ .FieldName }}  {{ .FieldType }} `{{ .FieldJsonTag }}` // {{ .Comment }}
	{{end}}
}
func Convert(m *model.{{.TableNameUpperCamel}}Model) *{{.TableNameUpperCamel}}View {
	return &{{.TableNameUpperCamel}}View{
		{{range $field := .Fields}}{{ .FieldName }} : m.{{ .FieldName }}.{{ .FieldNullTypeValue}},
		{{end}}
	}
}
func Converts(models []model.{{.TableNameUpperCamel}}Model) []{{.TableNameUpperCamel}}View {
	views := make([]{{.TableNameUpperCamel}}View, 0, len(models))
	for _, model := range models {
		views = append(views, *Convert(&model))
	}
	return views
}

func ConvertExtend(m *model.{{.TableNameUpperCamel}}Extend) *{{.TableNameUpperCamel}}View {
	view := Convert(&m.{{.TableNameUpperCamel}}Model)
	return view
}
func ConvertExtends(extends []model.{{.TableNameUpperCamel}}Extend) []{{.TableNameUpperCamel}}View {
	views := make([]{{.TableNameUpperCamel}}View, 0, len(extends))
	for _, extend := range extends {
		views = append(views, *ConvertExtend(&extend))
	}
	return views
}